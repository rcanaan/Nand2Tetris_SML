<tokens>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> myNum </identifier>
<symbol> , </symbol>
<identifier> guess </identifier>
<symbol> , </symbol>
<identifier> maxGuesses </identifier>
<symbol> , </symbol>
<identifier> guessCount </identifier>
<symbol> , </symbol>
<identifier> border </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Text </identifier>
<identifier> text </identifier>
<symbol> , </symbol>
<identifier> wrong </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> myNum </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<integerConstant> 31 </integerConstant>
<symbol> , </symbol>
<integerConstant> 35 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> maxGuesses </identifier>
<symbol> = </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> guessCount </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> border </identifier>
<symbol> = </symbol>
<identifier> Border </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> text </identifier>
<symbol> = </symbol>
<identifier> Text </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> guess </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<stringConstant>   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> guessCount </identifier>
<symbol> = </symbol>
<identifier> guessCount </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> guess </identifier>
<symbol> = </symbol>
<identifier> myNum </identifier>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> guessCount </identifier>
<symbol> &lt; </symbol>
<identifier> maxGuesses </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Text </identifier>
<symbol> . </symbol>
<identifier> wrong </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> guess </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<stringConstant>   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> guessCount </identifier>
<symbol> = </symbol>
<identifier> guessCount </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> guess </identifier>
<symbol> = </symbol>
<identifier> myNum </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Text </identifier>
<symbol> . </symbol>
<identifier> nomore </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Text </identifier>
<symbol> . </symbol>
<identifier> right </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
