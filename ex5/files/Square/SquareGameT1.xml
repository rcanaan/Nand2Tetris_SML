<tokens>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> This </identifier>
<identifier> file </identifier>
<identifier> is </identifier>
<identifier> part </identifier>
<identifier> of </identifier>
<identifier> www </identifier>
<symbol> . </symbol>
<identifier> nand2tetris </identifier>
<symbol> . </symbol>
<identifier> org </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> and </identifier>
<identifier> the </identifier>
<identifier> book </identifier>
<stringConstant> The Elements of Computing Systems </stringConstant>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> by </identifier>
<identifier> Nisan </identifier>
<identifier> and </identifier>
<identifier> Schocken </identifier>
<symbol> , </symbol>
<identifier> MIT </identifier>
<identifier> Press </identifier>
<symbol> . </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> File </identifier>
<identifier> name </identifier>
<identifier> : </identifier>
<identifier> projects </identifier>
<symbol> / </symbol>
<integerConstant> 11 </integerConstant>
<symbol> / </symbol>
<identifier> Square </identifier>
<symbol> / </symbol>
<identifier> SquareGame </identifier>
<symbol> . </symbol>
<identifier> jack </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<symbol> ( </symbol>
<identifier> same </identifier>
<identifier> as </identifier>
<identifier> projects </identifier>
<symbol> / </symbol>
<integerConstant> 09 </integerConstant>
<symbol> / </symbol>
<identifier> Square </identifier>
<symbol> / </symbol>
<identifier> SquareGame </identifier>
<symbol> . </symbol>
<identifier> jack </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Implements </identifier>
<identifier> the </identifier>
<identifier> Square </identifier>
<identifier> Dance </identifier>
<identifier> game </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> This </identifier>
<identifier> simple </identifier>
<identifier> game </identifier>
<identifier> allows </identifier>
<identifier> the </identifier>
<identifier> user </identifier>
<identifier> to </identifier>
<identifier> move </identifier>
<identifier> a </identifier>
<identifier> black </identifier>
<identifier> square </identifier>
<identifier> around </identifier>
<symbol> * </symbol>
<identifier> the </identifier>
<identifier> screen </identifier>
<symbol> , </symbol>
<identifier> and </identifier>
<identifier> change </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> 's </identifier>
<identifier> size </identifier>
<identifier> during </identifier>
<identifier> the </identifier>
<identifier> movement </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> When </identifier>
<identifier> the </identifier>
<identifier> game </identifier>
<identifier> starts </identifier>
<symbol> , </symbol>
<identifier> a </identifier>
<identifier> square </identifier>
<identifier> of </identifier>
<integerConstant> 30 </integerConstant>
<identifier> by </identifier>
<integerConstant> 30 </integerConstant>
<identifier> pixels </identifier>
<identifier> is </identifier>
<identifier> shown </identifier>
<identifier> at </identifier>
<identifier> the </identifier>
<symbol> * </symbol>
<identifier> top </identifier>
<symbol> - </symbol>
<identifier> left </identifier>
<identifier> corner </identifier>
<identifier> of </identifier>
<identifier> the </identifier>
<identifier> screen </identifier>
<symbol> . </symbol>
<identifier> The </identifier>
<identifier> user </identifier>
<identifier> controls </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> as </identifier>
<identifier> follows </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> The </identifier>
<integerConstant> 4 </integerConstant>
<identifier> arrow </identifier>
<identifier> keys </identifier>
<identifier> are </identifier>
<identifier> used </identifier>
<identifier> to </identifier>
<identifier> move </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> up </identifier>
<symbol> , </symbol>
<keyword> do </keyword>
<identifier> wn </identifier>
<symbol> , </symbol>
<identifier> left </identifier>
<symbol> , </symbol>
<identifier> and </identifier>
<identifier> right </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> The </identifier>
<identifier> 'z </identifier>
<identifier> ' </identifier>
<identifier> and </identifier>
<identifier> 'x </identifier>
<identifier> ' </identifier>
<identifier> keys </identifier>
<identifier> are </identifier>
<identifier> used </identifier>
<symbol> , </symbol>
<identifier> respectively </identifier>
<symbol> , </symbol>
<identifier> to </identifier>
<identifier> decrement </identifier>
<identifier> and </identifier>
<identifier> increment </identifier>
<symbol> * </symbol>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> 's </identifier>
<identifier> size </identifier>
<symbol> . </symbol>
<identifier> The </identifier>
<identifier> 'q </identifier>
<identifier> ' </identifier>
<identifier> key </identifier>
<identifier> is </identifier>
<identifier> used </identifier>
<identifier> to </identifier>
<identifier> quit </identifier>
<identifier> the </identifier>
<identifier> game </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> class </keyword>
<identifier> SquareGame </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Square </identifier>
<identifier> square </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> of </identifier>
<keyword> this </keyword>
<identifier> game </identifier>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> direction </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> 's </identifier>
<identifier> current </identifier>
<identifier> direction </identifier>
<identifier> : </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<integerConstant> 0 </integerConstant>
<symbol> = </symbol>
<identifier> none </identifier>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> = </symbol>
<identifier> up </identifier>
<symbol> , </symbol>
<integerConstant> 2 </integerConstant>
<symbol> = </symbol>
<keyword> do </keyword>
<identifier> wn </identifier>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> = </symbol>
<identifier> left </identifier>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> = </symbol>
<identifier> right </identifier>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Constructs </identifier>
<identifier> a </identifier>
<identifier> new </identifier>
<identifier> Square </identifier>
<identifier> Game </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> constructor </keyword>
<identifier> SquareGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> Creates </identifier>
<identifier> a </identifier>
<integerConstant> 30 </integerConstant>
<identifier> by </identifier>
<integerConstant> 30 </integerConstant>
<identifier> pixels </identifier>
<identifier> square </identifier>
<identifier> and </identifier>
<identifier> positions </identifier>
<identifier> it </identifier>
<identifier> at </identifier>
<identifier> the </identifier>
<identifier> top </identifier>
<symbol> - </symbol>
<identifier> left </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> of </identifier>
<identifier> the </identifier>
<identifier> screen </identifier>
<symbol> . </symbol>
<keyword> let </keyword>
<identifier> square </identifier>
<symbol> = </symbol>
<identifier> Square </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> initial </identifier>
<identifier> state </identifier>
<identifier> is </identifier>
<identifier> no </identifier>
<identifier> movement </identifier>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Disposes </identifier>
<keyword> this </keyword>
<identifier> game </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Moves </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> in </identifier>
<identifier> the </identifier>
<identifier> current </identifier>
<identifier> direction </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveSquare </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square </identifier>
<symbol> . </symbol>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square </identifier>
<symbol> . </symbol>
<identifier> moveDown </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square </identifier>
<symbol> . </symbol>
<identifier> moveLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square </identifier>
<symbol> . </symbol>
<identifier> moveRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> delays </identifier>
<identifier> the </identifier>
<identifier> next </identifier>
<identifier> movement </identifier>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Runs </identifier>
<identifier> the </identifier>
<identifier> game </identifier>
<identifier> : </identifier>
<identifier> handles </identifier>
<identifier> the </identifier>
<identifier> user </identifier>
<identifier> 's </identifier>
<identifier> inputs </identifier>
<identifier> and </identifier>
<identifier> moves </identifier>
<identifier> the </identifier>
<identifier> square </identifier>
<identifier> accordingly </identifier>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> key </identifier>
<identifier> currently </identifier>
<identifier> pressed </identifier>
<identifier> by </identifier>
<identifier> the </identifier>
<identifier> user </identifier>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> exit </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> waits </identifier>
<identifier> for </identifier>
<identifier> a </identifier>
<identifier> key </identifier>
<identifier> to </identifier>
<identifier> be </identifier>
<identifier> pressed </identifier>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> moveSquare </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 81 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> q </identifier>
<identifier> key </identifier>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 90 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square </identifier>
<symbol> . </symbol>
<identifier> decSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<identifier> key </identifier>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 88 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> square </identifier>
<symbol> . </symbol>
<identifier> incSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> x </identifier>
<identifier> key </identifier>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 131 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> up </identifier>
<identifier> arrow </identifier>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 133 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<keyword> do </keyword>
<identifier> wn </identifier>
<identifier> arrow </identifier>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> left </identifier>
<identifier> arrow </identifier>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> right </identifier>
<identifier> arrow </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> waits </identifier>
<identifier> for </identifier>
<identifier> the </identifier>
<identifier> key </identifier>
<identifier> to </identifier>
<identifier> be </identifier>
<identifier> released </identifier>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> moveSquare </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<keyword> while </keyword>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
