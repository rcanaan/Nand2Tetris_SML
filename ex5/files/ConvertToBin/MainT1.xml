<tokens>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> This </identifier>
<identifier> file </identifier>
<identifier> is </identifier>
<identifier> part </identifier>
<identifier> of </identifier>
<identifier> www </identifier>
<symbol> . </symbol>
<identifier> nand2tetris </identifier>
<symbol> . </symbol>
<identifier> org </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> and </identifier>
<identifier> the </identifier>
<identifier> book </identifier>
<stringConstant> The Elements of Computing Systems </stringConstant>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> by </identifier>
<identifier> Nisan </identifier>
<identifier> and </identifier>
<identifier> Schocken </identifier>
<symbol> , </symbol>
<identifier> MIT </identifier>
<identifier> Press </identifier>
<symbol> . </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> File </identifier>
<identifier> name </identifier>
<identifier> : </identifier>
<identifier> projects </identifier>
<symbol> / </symbol>
<integerConstant> 11 </integerConstant>
<symbol> / </symbol>
<identifier> ConvertToBin </identifier>
<symbol> / </symbol>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> jack </identifier>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Unpacks </identifier>
<identifier> a </identifier>
<integerConstant> 16 </integerConstant>
<symbol> - </symbol>
<identifier> bit </identifier>
<identifier> number </identifier>
<keyword> int </keyword>
<identifier> o </identifier>
<identifier> its </identifier>
<identifier> binary </identifier>
<identifier> representation </identifier>
<identifier> : </identifier>
<symbol> * </symbol>
<identifier> Takes </identifier>
<identifier> the </identifier>
<integerConstant> 16 </integerConstant>
<symbol> - </symbol>
<identifier> bit </identifier>
<identifier> number </identifier>
<identifier> stored </identifier>
<identifier> in </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> ] </symbol>
<identifier> and </identifier>
<identifier> stores </identifier>
<identifier> its </identifier>
<identifier> individual </identifier>
<symbol> * </symbol>
<identifier> bits </identifier>
<identifier> in </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8001 </integerConstant>
<symbol> . </symbol>
<symbol> . </symbol>
<integerConstant> 8016 </integerConstant>
<symbol> ] </symbol>
<symbol> ( </symbol>
<identifier> each </identifier>
<identifier> location </identifier>
<identifier> will </identifier>
<identifier> contain </identifier>
<integerConstant> 0 </integerConstant>
<identifier> or </identifier>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> Before </identifier>
<identifier> the </identifier>
<identifier> conversion </identifier>
<symbol> , </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8001 </integerConstant>
<symbol> ] </symbol>
<symbol> . </symbol>
<symbol> . </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8016 </integerConstant>
<symbol> ] </symbol>
<identifier> are </identifier>
<identifier> initialized </identifier>
<identifier> to </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> The </identifier>
<identifier> program </identifier>
<identifier> should </identifier>
<identifier> be </identifier>
<identifier> tested </identifier>
<identifier> as </identifier>
<identifier> follows </identifier>
<identifier> : </identifier>
<symbol> * </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<identifier> Load </identifier>
<identifier> the </identifier>
<identifier> program </identifier>
<keyword> int </keyword>
<identifier> o </identifier>
<identifier> the </identifier>
<identifier> supplied </identifier>
<identifier> VM </identifier>
<identifier> emulator </identifier>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<identifier> Put </identifier>
<identifier> some </identifier>
<identifier> value </identifier>
<identifier> in </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> ] </symbol>
<symbol> * </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<identifier> Switch </identifier>
<identifier> to </identifier>
<stringConstant> no animation </stringConstant>
<symbol> * </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<identifier> Run </identifier>
<identifier> the </identifier>
<identifier> program </identifier>
<symbol> ( </symbol>
<identifier> give </identifier>
<identifier> it </identifier>
<identifier> enough </identifier>
<identifier> time </identifier>
<identifier> to </identifier>
<identifier> run </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<identifier> Stop </identifier>
<identifier> the </identifier>
<identifier> program </identifier>
<symbol> * </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ) </symbol>
<identifier> Check </identifier>
<identifier> that </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8001 </integerConstant>
<symbol> ] </symbol>
<symbol> . </symbol>
<symbol> . </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8016 </integerConstant>
<symbol> ] </symbol>
<identifier> contains </identifier>
<identifier> the </identifier>
<identifier> correct </identifier>
<identifier> binary </identifier>
<identifier> result </identifier>
<symbol> , </symbol>
<identifier> and </identifier>
<symbol> * </symbol>
<identifier> that </identifier>
<identifier> none </identifier>
<identifier> of </identifier>
<identifier> these </identifier>
<identifier> memory </identifier>
<identifier> locations </identifier>
<identifier> contains </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Initializes </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8001 </integerConstant>
<symbol> ] </symbol>
<symbol> . </symbol>
<symbol> . </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8016 </integerConstant>
<symbol> ] </symbol>
<identifier> to </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<symbol> * </symbol>
<identifier> and </identifier>
<identifier> converts </identifier>
<identifier> the </identifier>
<identifier> value </identifier>
<identifier> in </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> ] </symbol>
<identifier> to </identifier>
<identifier> binary </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> value </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> fillMemory </identifier>
<symbol> ( </symbol>
<integerConstant> 8001 </integerConstant>
<symbol> , </symbol>
<integerConstant> 16 </integerConstant>
<symbol> , </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> sets </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8001 </integerConstant>
<symbol> ] </symbol>
<symbol> . </symbol>
<symbol> . </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8016 </integerConstant>
<symbol> ] </symbol>
<identifier> to </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<keyword> let </keyword>
<identifier> value </identifier>
<symbol> = </symbol>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> peek </identifier>
<symbol> ( </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> reads </identifier>
<identifier> a </identifier>
<identifier> value </identifier>
<identifier> from </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> ] </symbol>
<keyword> do </keyword>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> convert </identifier>
<symbol> ( </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> performs </identifier>
<identifier> the </identifier>
<identifier> conversion </identifier>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Converts </identifier>
<identifier> the </identifier>
<identifier> given </identifier>
<identifier> decimal </identifier>
<identifier> value </identifier>
<identifier> to </identifier>
<identifier> binary </identifier>
<symbol> , </symbol>
<identifier> and </identifier>
<identifier> puts </identifier>
<symbol> * </symbol>
<identifier> the </identifier>
<identifier> resulting </identifier>
<identifier> bits </identifier>
<identifier> in </identifier>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8001 </integerConstant>
<symbol> ] </symbol>
<symbol> . </symbol>
<symbol> . </symbol>
<identifier> RAM </identifier>
<symbol> [ </symbol>
<integerConstant> 8016 </integerConstant>
<symbol> ] </symbol>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> convert </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> mask </identifier>
<symbol> , </symbol>
<identifier> position </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> loop </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> loop </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> loop </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> position </identifier>
<symbol> = </symbol>
<identifier> position </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> mask </identifier>
<symbol> = </symbol>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> nextMask </identifier>
<symbol> ( </symbol>
<identifier> mask </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> position </identifier>
<symbol> &gt; </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> value </identifier>
<symbol> &amp; </symbol>
<identifier> mask </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> + </symbol>
<identifier> position </identifier>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> + </symbol>
<identifier> position </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> loop </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Returns </identifier>
<identifier> the </identifier>
<identifier> next </identifier>
<identifier> mask </identifier>
<symbol> ( </symbol>
<identifier> the </identifier>
<identifier> mask </identifier>
<identifier> that </identifier>
<identifier> should </identifier>
<identifier> follow </identifier>
<identifier> the </identifier>
<identifier> given </identifier>
<identifier> mask </identifier>
<symbol> ) </symbol>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> nextMask </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> mask </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> mask </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> mask </identifier>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Fills </identifier>
<identifier> 'length </identifier>
<identifier> ' </identifier>
<identifier> consecutive </identifier>
<identifier> memory </identifier>
<identifier> locations </identifier>
<identifier> with </identifier>
<identifier> 'value </identifier>
<identifier> ' </identifier>
<symbol> , </symbol>
<symbol> * </symbol>
<identifier> starting </identifier>
<identifier> at </identifier>
<identifier> 'startAddress </identifier>
<identifier> ' </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> fillMemory </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> startAddress </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> length </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> startAddress </identifier>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> length </identifier>
<symbol> = </symbol>
<identifier> length </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> startAddress </identifier>
<symbol> = </symbol>
<identifier> startAddress </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
