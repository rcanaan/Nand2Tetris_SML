<tokens>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> This </identifier>
<identifier> file </identifier>
<identifier> is </identifier>
<identifier> part </identifier>
<identifier> of </identifier>
<identifier> www </identifier>
<symbol> . </symbol>
<identifier> nand2tetris </identifier>
<symbol> . </symbol>
<identifier> org </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> and </identifier>
<identifier> the </identifier>
<identifier> book </identifier>
<stringConstant> The Elements of Computing Systems </stringConstant>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> by </identifier>
<identifier> Nisan </identifier>
<identifier> and </identifier>
<identifier> Schocken </identifier>
<symbol> , </symbol>
<identifier> MIT </identifier>
<identifier> Press </identifier>
<symbol> . </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> File </identifier>
<identifier> name </identifier>
<identifier> : </identifier>
<identifier> projects </identifier>
<symbol> / </symbol>
<integerConstant> 11 </integerConstant>
<symbol> / </symbol>
<identifier> Pong </identifier>
<symbol> / </symbol>
<identifier> Bat </identifier>
<symbol> . </symbol>
<identifier> jack </identifier>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> A </identifier>
<identifier> graphical </identifier>
<identifier> Pong </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> Displayed </identifier>
<identifier> as </identifier>
<identifier> a </identifier>
<identifier> filled </identifier>
<identifier> horizontal </identifier>
<identifier> rectangle </identifier>
<identifier> that </identifier>
<identifier> has </identifier>
<symbol> * </symbol>
<identifier> a </identifier>
<identifier> screen </identifier>
<identifier> location </identifier>
<symbol> , </symbol>
<identifier> a </identifier>
<identifier> width </identifier>
<identifier> and </identifier>
<identifier> a </identifier>
<identifier> height </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> Has </identifier>
<keyword> method </keyword>
<identifier> s </identifier>
<identifier> for </identifier>
<identifier> drawing </identifier>
<symbol> , </symbol>
<identifier> erasing </identifier>
<symbol> , </symbol>
<identifier> moving </identifier>
<identifier> left </identifier>
<identifier> and </identifier>
<identifier> right </identifier>
<symbol> , </symbol>
<symbol> * </symbol>
<identifier> and </identifier>
<identifier> changing </identifier>
<identifier> its </identifier>
<identifier> width </identifier>
<symbol> ( </symbol>
<identifier> to </identifier>
<identifier> make </identifier>
<identifier> the </identifier>
<identifier> hitting </identifier>
<identifier> action </identifier>
<identifier> more </identifier>
<identifier> challenging </identifier>
<symbol> ) </symbol>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> This </identifier>
<keyword> class </keyword>
<identifier> should </identifier>
<identifier> have </identifier>
<identifier> been </identifier>
<identifier> called </identifier>
<stringConstant> paddle </stringConstant>
<symbol> , </symbol>
<identifier> following </identifier>
<identifier> the </identifier>
<symbol> * </symbol>
<identifier> standard </identifier>
<identifier> Pong </identifier>
<identifier> terminology </identifier>
<symbol> . </symbol>
<identifier> But </identifier>
<symbol> , </symbol>
<identifier> unaware </identifier>
<identifier> of </identifier>
<keyword> this </keyword>
<identifier> terminology </identifier>
<symbol> , </symbol>
<symbol> * </symbol>
<identifier> we </identifier>
<identifier> called </identifier>
<identifier> it </identifier>
<stringConstant> bat </stringConstant>
<symbol> , </symbol>
<identifier> and </identifier>
<identifier> then </identifier>
<identifier> decided </identifier>
<identifier> to </identifier>
<identifier> stick </identifier>
<identifier> to </identifier>
<identifier> it </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> class </keyword>
<identifier> Bat </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> screen </identifier>
<identifier> location </identifier>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> width </identifier>
<symbol> , </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> width </identifier>
<identifier> and </identifier>
<identifier> height </identifier>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> direction </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> direction </identifier>
<identifier> of </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> movement </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> = </symbol>
<identifier> left </identifier>
<symbol> , </symbol>
<integerConstant> 2 </integerConstant>
<symbol> = </symbol>
<identifier> right </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Constructs </identifier>
<identifier> a </identifier>
<identifier> new </identifier>
<identifier> bat </identifier>
<identifier> with </identifier>
<identifier> the </identifier>
<identifier> given </identifier>
<identifier> location </identifier>
<identifier> and </identifier>
<identifier> width </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> constructor </keyword>
<identifier> Bat </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> Ax </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Ay </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Awidth </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Aheight </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> Ax </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> Ay </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> width </identifier>
<symbol> = </symbol>
<identifier> Awidth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> height </identifier>
<symbol> = </symbol>
<identifier> Aheight </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Deallocates </identifier>
<identifier> the </identifier>
<identifier> object </identifier>
<identifier> 's </identifier>
<identifier> memory </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Shows </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Hides </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> hide </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Draws </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Sets </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> direction </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> = </symbol>
<identifier> stop </identifier>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> = </symbol>
<identifier> left </identifier>
<symbol> , </symbol>
<integerConstant> 2 </integerConstant>
<symbol> = </symbol>
<identifier> right </identifier>
<symbol> ) </symbol>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setDirection </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> Adirection </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<identifier> Adirection </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Returns </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> left </identifier>
<identifier> edge </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Returns </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> right </identifier>
<identifier> edge </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Sets </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> width </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setWidth </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> Awidth </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> hide </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> width </identifier>
<symbol> = </symbol>
<identifier> Awidth </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Moves </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> one </identifier>
<identifier> step </identifier>
<identifier> in </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> direction </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 511 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<integerConstant> 511 </integerConstant>
<symbol> - </symbol>
<identifier> width </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 3 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
