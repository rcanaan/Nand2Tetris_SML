<tokens>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> This </identifier>
<identifier> file </identifier>
<identifier> is </identifier>
<identifier> part </identifier>
<identifier> of </identifier>
<identifier> www </identifier>
<symbol> . </symbol>
<identifier> nand2tetris </identifier>
<symbol> . </symbol>
<identifier> org </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> and </identifier>
<identifier> the </identifier>
<identifier> book </identifier>
<stringConstant> The Elements of Computing Systems </stringConstant>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> by </identifier>
<identifier> Nisan </identifier>
<identifier> and </identifier>
<identifier> Schocken </identifier>
<symbol> , </symbol>
<identifier> MIT </identifier>
<identifier> Press </identifier>
<symbol> . </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> File </identifier>
<identifier> name </identifier>
<identifier> : </identifier>
<identifier> projects </identifier>
<symbol> / </symbol>
<integerConstant> 11 </integerConstant>
<symbol> / </symbol>
<identifier> Pong </identifier>
<symbol> / </symbol>
<identifier> PongGame </identifier>
<symbol> . </symbol>
<identifier> jack </identifier>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Represents </identifier>
<identifier> a </identifier>
<identifier> Pong </identifier>
<identifier> game </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> class </keyword>
<identifier> PongGame </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<identifier> PongGame </identifier>
<identifier> instance </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> singelton </identifier>
<symbol> , </symbol>
<identifier> a </identifier>
<identifier> Pong </identifier>
<identifier> game </identifier>
<identifier> instance </identifier>
<keyword> field </keyword>
<identifier> Bat </identifier>
<identifier> bat </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> bat </identifier>
<keyword> field </keyword>
<identifier> Ball </identifier>
<identifier> ball </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> ball </identifier>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> wall </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> current </identifier>
<identifier> wall </identifier>
<identifier> that </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> is </identifier>
<identifier> bouncing </identifier>
<identifier> off </identifier>
<identifier> of </identifier>
<symbol> . </symbol>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> exit </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<keyword> true </keyword>
<identifier> when </identifier>
<identifier> the </identifier>
<identifier> game </identifier>
<identifier> is </identifier>
<identifier> over </identifier>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> score </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> current </identifier>
<identifier> score </identifier>
<symbol> . </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> lastWall </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> last </identifier>
<identifier> wall </identifier>
<identifier> that </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> bounced </identifier>
<identifier> off </identifier>
<identifier> of </identifier>
<symbol> . </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> The </identifier>
<identifier> current </identifier>
<identifier> width </identifier>
<identifier> of </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> batWidth </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Constructs </identifier>
<identifier> a </identifier>
<identifier> new </identifier>
<identifier> Pong </identifier>
<identifier> game </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> constructor </keyword>
<identifier> PongGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> clearScreen </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> batWidth </identifier>
<symbol> = </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> initial </identifier>
<identifier> bat </identifier>
<identifier> size </identifier>
<keyword> let </keyword>
<identifier> bat </identifier>
<symbol> = </symbol>
<identifier> Bat </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 230 </integerConstant>
<symbol> , </symbol>
<integerConstant> 229 </integerConstant>
<symbol> , </symbol>
<identifier> batWidth </identifier>
<symbol> , </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> ball </identifier>
<symbol> = </symbol>
<identifier> Ball </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 253 </integerConstant>
<symbol> , </symbol>
<integerConstant> 222 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 511 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 229 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 238 </integerConstant>
<symbol> , </symbol>
<integerConstant> 511 </integerConstant>
<symbol> , </symbol>
<integerConstant> 240 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 22 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Score: 0 </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> lastWall </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Deallocates </identifier>
<identifier> the </identifier>
<identifier> object </identifier>
<identifier> 's </identifier>
<identifier> memory </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Creates </identifier>
<identifier> an </identifier>
<identifier> instance </identifier>
<identifier> of </identifier>
<identifier> Pong </identifier>
<identifier> game </identifier>
<symbol> , </symbol>
<identifier> and </identifier>
<identifier> stores </identifier>
<identifier> it </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> newInstance </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> instance </identifier>
<symbol> = </symbol>
<identifier> PongGame </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Returns </identifier>
<identifier> the </identifier>
<identifier> single </identifier>
<identifier> instance </identifier>
<identifier> of </identifier>
<keyword> this </keyword>
<identifier> Pong </identifier>
<identifier> game </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> function </keyword>
<identifier> PongGame </identifier>
<identifier> getInstance </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> instance </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Starts </identifier>
<identifier> the </identifier>
<identifier> game </identifier>
<symbol> , </symbol>
<identifier> and </identifier>
<identifier> andles </identifier>
<identifier> inputs </identifier>
<identifier> from </identifier>
<identifier> the </identifier>
<identifier> user </identifier>
<identifier> that </identifier>
<identifier> control </identifier>
<symbol> * </symbol>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> movement </identifier>
<identifier> direction </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> waits </identifier>
<identifier> for </identifier>
<identifier> a </identifier>
<identifier> key </identifier>
<identifier> to </identifier>
<identifier> be </identifier>
<identifier> pressed </identifier>
<symbol> . </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> moveBall </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> setDirection </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> setDirection </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 140 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> Waits </identifier>
<identifier> for </identifier>
<identifier> the </identifier>
<identifier> key </identifier>
<identifier> to </identifier>
<identifier> be </identifier>
<identifier> released </identifier>
<symbol> . </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> moveBall </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<integerConstant> 27 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Game Over </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Handles </identifier>
<identifier> ball </identifier>
<identifier> movement </identifier>
<symbol> , </symbol>
<identifier> including </identifier>
<identifier> bouncing </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> If </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> bounces </identifier>
<identifier> off </identifier>
<identifier> a </identifier>
<identifier> wall </identifier>
<symbol> , </symbol>
<identifier> finds </identifier>
<identifier> its </identifier>
<identifier> new </identifier>
<identifier> direction </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> If </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> bounces </identifier>
<identifier> off </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<symbol> , </symbol>
<identifier> increases </identifier>
<identifier> the </identifier>
<identifier> score </identifier>
<identifier> by </identifier>
<identifier> one </identifier>
<symbol> * </symbol>
<identifier> and </identifier>
<identifier> shrinks </identifier>
<identifier> the </identifier>
<identifier> bat </identifier>
<identifier> 's </identifier>
<identifier> size </identifier>
<symbol> , </symbol>
<identifier> to </identifier>
<identifier> make </identifier>
<identifier> the </identifier>
<identifier> game </identifier>
<identifier> more </identifier>
<identifier> challenging </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveBall </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bouncingDirection </identifier>
<symbol> , </symbol>
<identifier> batLeft </identifier>
<symbol> , </symbol>
<identifier> batRight </identifier>
<symbol> , </symbol>
<identifier> ballLeft </identifier>
<symbol> , </symbol>
<identifier> ballRight </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> wall </identifier>
<symbol> = </symbol>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<identifier> lastWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> lastWall </identifier>
<symbol> = </symbol>
<identifier> wall </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> batLeft </identifier>
<symbol> = </symbol>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> batRight </identifier>
<symbol> = </symbol>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> ballLeft </identifier>
<symbol> = </symbol>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> ballRight </identifier>
<symbol> = </symbol>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> batLeft </identifier>
<symbol> &gt; </symbol>
<identifier> ballRight </identifier>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> batRight </identifier>
<symbol> &lt; </symbol>
<identifier> ballLeft </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> ballRight </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<identifier> batLeft </identifier>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> ballLeft </identifier>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<identifier> batRight </identifier>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> batWidth </identifier>
<symbol> = </symbol>
<identifier> batWidth </identifier>
<symbol> - </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> setWidth </identifier>
<symbol> ( </symbol>
<identifier> batWidth </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<identifier> score </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 22 </integerConstant>
<symbol> , </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> score </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> bounce </identifier>
<symbol> ( </symbol>
<identifier> bouncingDirection </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
