<tokens>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> This </identifier>
<identifier> file </identifier>
<identifier> is </identifier>
<identifier> part </identifier>
<identifier> of </identifier>
<identifier> www </identifier>
<symbol> . </symbol>
<identifier> nand2tetris </identifier>
<symbol> . </symbol>
<identifier> org </identifier>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> and </identifier>
<identifier> the </identifier>
<identifier> book </identifier>
<stringConstant> The Elements of Computing Systems </stringConstant>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> by </identifier>
<identifier> Nisan </identifier>
<identifier> and </identifier>
<identifier> Schocken </identifier>
<symbol> , </symbol>
<identifier> MIT </identifier>
<identifier> Press </identifier>
<symbol> . </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> File </identifier>
<identifier> name </identifier>
<identifier> : </identifier>
<identifier> projects </identifier>
<symbol> / </symbol>
<integerConstant> 11 </integerConstant>
<symbol> / </symbol>
<identifier> Pong </identifier>
<symbol> / </symbol>
<identifier> Ball </identifier>
<symbol> . </symbol>
<identifier> jack </identifier>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> A </identifier>
<identifier> graphical </identifier>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> Characterized </identifier>
<identifier> by </identifier>
<identifier> a </identifier>
<identifier> screen </identifier>
<identifier> location </identifier>
<identifier> and </identifier>
<identifier> distance </identifier>
<identifier> of </identifier>
<symbol> * </symbol>
<identifier> last </identifier>
<identifier> destination </identifier>
<symbol> . </symbol>
<identifier> Has </identifier>
<keyword> method </keyword>
<identifier> s </identifier>
<identifier> for </identifier>
<identifier> drawing </identifier>
<symbol> , </symbol>
<identifier> erasing </identifier>
<identifier> and </identifier>
<identifier> moving </identifier>
<identifier> on </identifier>
<identifier> the </identifier>
<identifier> screen </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> The </identifier>
<identifier> ball </identifier>
<identifier> is </identifier>
<identifier> displayed </identifier>
<identifier> as </identifier>
<identifier> a </identifier>
<identifier> filled </identifier>
<symbol> , </symbol>
<integerConstant> 6 </integerConstant>
<symbol> - </symbol>
<identifier> by </identifier>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<identifier> pixles </identifier>
<identifier> rectangle </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> class </keyword>
<identifier> Ball </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> 's </identifier>
<identifier> screen </identifier>
<identifier> location </identifier>
<symbol> ( </symbol>
<identifier> in </identifier>
<identifier> pixels </identifier>
<symbol> ) </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> lengthx </identifier>
<symbol> , </symbol>
<identifier> lengthy </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> distance </identifier>
<identifier> of </identifier>
<identifier> last </identifier>
<identifier> destination </identifier>
<symbol> ( </symbol>
<identifier> in </identifier>
<identifier> pixels </identifier>
<symbol> ) </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> d </identifier>
<symbol> , </symbol>
<identifier> straightD </identifier>
<symbol> , </symbol>
<identifier> diagonalD </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> used </identifier>
<identifier> for </identifier>
<identifier> straight </identifier>
<identifier> line </identifier>
<identifier> movement </identifier>
<identifier> computation </identifier>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> invert </identifier>
<symbol> , </symbol>
<identifier> positivex </identifier>
<symbol> , </symbol>
<identifier> positivey </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<symbol> ( </symbol>
<identifier> same </identifier>
<symbol> ) </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> leftWall </identifier>
<symbol> , </symbol>
<identifier> rightWall </identifier>
<symbol> , </symbol>
<identifier> topWall </identifier>
<symbol> , </symbol>
<identifier> bottomWall </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> wall </identifier>
<identifier> locations </identifier>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> wall </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> last </identifier>
<identifier> wall </identifier>
<identifier> that </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> was </identifier>
<identifier> bounced </identifier>
<identifier> off </identifier>
<identifier> of </identifier>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Constructs </identifier>
<identifier> a </identifier>
<identifier> new </identifier>
<identifier> ball </identifier>
<identifier> with </identifier>
<identifier> the </identifier>
<identifier> given </identifier>
<identifier> initial </identifier>
<identifier> location </identifier>
<identifier> and </identifier>
<identifier> wall </identifier>
<identifier> locations </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> constructor </keyword>
<identifier> Ball </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> Ax </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Ay </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AleftWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> ArightWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AtopWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AbottomWall </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> Ax </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> Ay </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> leftWall </identifier>
<symbol> = </symbol>
<identifier> AleftWall </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rightWall </identifier>
<symbol> = </symbol>
<identifier> ArightWall </identifier>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<identifier> for </identifier>
<identifier> ball </identifier>
<identifier> size </identifier>
<keyword> let </keyword>
<identifier> topWall </identifier>
<symbol> = </symbol>
<identifier> AtopWall </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> bottomWall </identifier>
<symbol> = </symbol>
<identifier> AbottomWall </identifier>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<identifier> for </identifier>
<identifier> ball </identifier>
<identifier> size </identifier>
<keyword> let </keyword>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Deallocates </identifier>
<identifier> the </identifier>
<identifier> Ball </identifier>
<identifier> 's </identifier>
<identifier> memory </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Shows </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Hides </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> hide </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Draws </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Returns </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> 's </identifier>
<identifier> left </identifier>
<identifier> edge </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Returns </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> 's </identifier>
<identifier> right </identifier>
<identifier> edge </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Computes </identifier>
<identifier> and </identifier>
<identifier> sets </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> 's </identifier>
<identifier> destination </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> destx </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> desty </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> lengthx </identifier>
<symbol> = </symbol>
<identifier> destx </identifier>
<symbol> - </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> lengthy </identifier>
<symbol> = </symbol>
<identifier> desty </identifier>
<symbol> - </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> lengthx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> lengthy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> invert </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> swap </identifier>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> positivex </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &lt; </symbol>
<identifier> desty </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> positivey </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<identifier> destx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> positivex </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<identifier> destx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> positivey </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &lt; </symbol>
<identifier> desty </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> d </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> straightD </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> diagonalD </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> - </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Moves </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> one </identifier>
<identifier> unit </identifier>
<identifier> towards </identifier>
<identifier> its </identifier>
<identifier> destination </identifier>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> If </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> has </identifier>
<identifier> reached </identifier>
<identifier> a </identifier>
<identifier> wall </identifier>
<symbol> , </symbol>
<keyword> return </keyword>
<identifier> s </identifier>
<integerConstant> 0 </integerConstant>
<symbol> . </symbol>
<symbol> * </symbol>
<identifier> Else </identifier>
<symbol> , </symbol>
<keyword> return </keyword>
<identifier> s </identifier>
<identifier> a </identifier>
<identifier> value </identifier>
<identifier> according </identifier>
<identifier> to </identifier>
<identifier> the </identifier>
<identifier> wall </identifier>
<identifier> : </identifier>
<symbol> * </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ( </symbol>
<identifier> left </identifier>
<identifier> wall </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ( </symbol>
<identifier> right </identifier>
<identifier> wall </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ( </symbol>
<identifier> top </identifier>
<identifier> wall </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ( </symbol>
<identifier> bottom </identifier>
<identifier> wall </identifier>
<symbol> ) </symbol>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> hide </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> d </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> d </identifier>
<symbol> = </symbol>
<identifier> d </identifier>
<symbol> + </symbol>
<identifier> straightD </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> d </identifier>
<symbol> = </symbol>
<identifier> d </identifier>
<symbol> + </symbol>
<identifier> diagonalD </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> positivey </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> positivex </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &gt; </symbol>
<identifier> leftWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> leftWall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<identifier> rightWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> rightWall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &gt; </symbol>
<identifier> topWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> topWall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &lt; </symbol>
<identifier> bottomWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> bottomWall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> wall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<symbol> * </symbol>
<identifier> Bounces </identifier>
<identifier> off </identifier>
<identifier> the </identifier>
<identifier> current </identifier>
<identifier> wall </identifier>
<identifier> : </identifier>
<identifier> sets </identifier>
<identifier> the </identifier>
<identifier> new </identifier>
<identifier> destination </identifier>
<symbol> * </symbol>
<identifier> of </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> according </identifier>
<identifier> to </identifier>
<identifier> the </identifier>
<identifier> ball </identifier>
<identifier> 's </identifier>
<identifier> angle </identifier>
<identifier> and </identifier>
<identifier> the </identifier>
<identifier> given </identifier>
<symbol> * </symbol>
<identifier> bouncing </identifier>
<identifier> direction </identifier>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> / </symbol>
<integerConstant> 0 </integerConstant>
<symbol> / </symbol>
<integerConstant> 1 </integerConstant>
<symbol> = </symbol>
<identifier> left </identifier>
<symbol> / </symbol>
<identifier> center </identifier>
<symbol> / </symbol>
<identifier> right </identifier>
<identifier> or </identifier>
<identifier> up </identifier>
<symbol> / </symbol>
<identifier> center </identifier>
<symbol> / </symbol>
<keyword> do </keyword>
<identifier> wn </identifier>
<symbol> ) </symbol>
<symbol> . </symbol>
<symbol> * </symbol>
<symbol> / </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> bounce </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> bouncingDirection </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> newx </identifier>
<symbol> , </symbol>
<identifier> newy </identifier>
<symbol> , </symbol>
<identifier> divLengthx </identifier>
<symbol> , </symbol>
<identifier> divLengthy </identifier>
<symbol> , </symbol>
<identifier> factor </identifier>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> dividing </identifier>
<identifier> by </identifier>
<integerConstant> 10 </integerConstant>
<identifier> first </identifier>
<identifier> since </identifier>
<identifier> results </identifier>
<identifier> are </identifier>
<identifier> too </identifier>
<identifier> big </identifier>
<keyword> let </keyword>
<identifier> divLengthx </identifier>
<symbol> = </symbol>
<identifier> lengthx </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> divLengthy </identifier>
<symbol> = </symbol>
<identifier> lengthy </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> factor </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> lengthx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> lengthx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> factor </identifier>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> bounce </identifier>
<identifier> direction </identifier>
<identifier> is </identifier>
<identifier> in </identifier>
<identifier> ball </identifier>
<identifier> direction </identifier>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> factor </identifier>
<symbol> = </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> bounce </identifier>
<identifier> direction </identifier>
<identifier> is </identifier>
<identifier> against </identifier>
<identifier> ball </identifier>
<identifier> direction </identifier>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> newx </identifier>
<symbol> = </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newy </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> divLengthy </identifier>
<symbol> * </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> divLengthx </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newy </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> newy </identifier>
<symbol> * </symbol>
<identifier> factor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> newx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newy </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> divLengthy </identifier>
<symbol> * </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> divLengthx </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newy </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> newy </identifier>
<symbol> * </symbol>
<identifier> factor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> newy </identifier>
<symbol> = </symbol>
<integerConstant> 250 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newx </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> divLengthx </identifier>
<symbol> * </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> divLengthy </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newx </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> newx </identifier>
<symbol> * </symbol>
<identifier> factor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<symbol> / </symbol>
<symbol> / </symbol>
<identifier> assumes </identifier>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<keyword> let </keyword>
<identifier> newy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newx </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> divLengthx </identifier>
<symbol> * </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> divLengthy </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newx </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> newx </identifier>
<symbol> * </symbol>
<identifier> factor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<identifier> newx </identifier>
<symbol> , </symbol>
<identifier> newy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
